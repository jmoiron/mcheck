package main

type MCDocParser Peg {
}

Start <- _ Statement* _ !.

Statement <- (Attribute* _ (
	UseStmt /
	TypeAlias /
	StructDef /
	EnumDef /
	DispatchStmt
)) _

UseStmt <- 'use' _ UsePath _
UsePath <- (DoubleColon / Identifier / SingleColon)+

TypeAlias <- 'type' _ Identifier _ '=' _ Type _

StructDef <- 'struct' _ Identifier _ '{' _ FieldList? _ '}' _
FieldList <- FieldOrSpread (',' _ FieldOrSpread)* ','? _
FieldOrSpread <- SpreadField / Field
Field <- Attribute* _ (ComputedField / NamedField)
ComputedField <- '[' _ Type _ ']' _ ':' _ Type _
NamedField <- FieldName _ ':' _ Type _
SpreadField <- Attribute* _ '...' _ Type _
FieldName <- Identifier '?'?

EnumDef <- 'enum' _ '(' _ Type _ ')' _ Identifier _ '{' _ EnumValueList? _ '}' _
EnumValueList <- EnumValue (',' _ EnumValue)* ','? _
EnumValue <- Identifier _ '=' _ String _

DispatchStmt <- 'dispatch' _ DispatchPath _ 'to' _ DispatchTarget _
DispatchPath <- 'minecraft:' Identifier '[' DispatchKeyList ']'
DispatchKeyList <- DispatchKey (',' DispatchKey)*
DispatchKey <- StaticIndexKey / Identifier
DispatchTarget <- ('struct' _ Identifier _ '{' _ FieldList? _ '}') / Type

SpreadStruct <- '...' _ 'struct' _ Identifier _ '{' _ FieldList? _ '}' _

Type <- (
	UnionType /
	AttributedType /
	ArrayType /
	StructType /
	ConstrainedType /
	PrimitiveType /
	ReferenceType /
	LiteralType
)

AttributedType <- Attribute+ _ (ArrayType / ConstrainedType / StructType / PrimitiveType / ReferenceType / LiteralType)

ConstrainedType <- (PrimitiveType / ReferenceType / LiteralType) _ ArrayConstraint

UnionType <- '(' _ Type (_ '|' _ Type)* (_ '|')? _ ')'
ArrayType <- '[' _ Type _ ']' _ ArrayConstraint?
StructType <- 'struct' _ Identifier? _ '{' _ FieldList? _ '}'
PrimitiveType <- ('string' / 'double' / 'float' / 'int' / 'boolean' / 'any')
ReferenceType <- ComplexReference / Identifier
ComplexReference <- Identifier ':' Identifier ('[' '[' ComplexRefParam ']' ']' / '[' ComplexRefParam ']')
ComplexRefParam <- StaticIndexKey / String / Identifier
StaticIndexKey <- '%fallback' / '%key' / '%parent' / '%none' / '%unknown'
LiteralType <- (String / Number / Boolean)

ArrayConstraint <- '@' _ (Range / Number)
Range <- Number '..' Number?

Attribute <- '#[' _ AttributeList _ ']' _
AttributeList <- AttributeItem (',' _ AttributeItem)*
AttributeItem <- AttributePair / AttributeCall / Identifier
AttributeCall <- Identifier '(' _ AttributeParamList? _ ')'
AttributeParamList <- AttributeParam (_ ',' _ AttributeParam)*
AttributeParam <- AttributePair / AttributeValue
AttributePair <- Identifier '=' AttributeValue
AttributeValue <- (ArrayLiteral / String / Number / Boolean / Identifier)

ArrayLiteral <- '[' _ (AttributeValue (_ ',' _ AttributeValue)*)? _ ']'

Comment <- '//' (!EOL .)* (EOL / !.)
DocComment <- '///' (!EOL .)* (EOL / !.)

Identifier <- [a-zA-Z_][a-zA-Z0-9_]*
String <- '"' (!'"' .)* '"'
Number <- '-'? [0-9]+ ('.' [0-9]+)?
Boolean <- ('true' / 'false')

DoubleColon <- '::'
SingleColon <- ':'

_ <- ([ \t\r\n] / Comment / DocComment)*
EOL <- '\r\n' / '\n' / '\r'