package main

type MCDocParser Peg {
}

Start <- _ Statement* _ !.

Statement <- (Attribute* _ (
	UseStmt /
	TypeAlias /
	StructDef /
	EnumDef /
	DispatchStmt
)) _

UseStmt <- 'use' _ UsePath
UsePath <- (DoubleColon Identifier (DoubleColon Identifier)* / Identifier (DoubleColon Identifier / SingleColon Identifier)*)

TypeAlias <- 'type' _ Identifier _ EQUALS Type

StructDef <- 'struct' _ Identifier _ LBRACE FieldList? RBRACE
FieldList <- FieldOrSpread (COMMA FieldOrSpread)* COMMA?
FieldOrSpread <- SpreadField / Field
Field <- Attribute* _ (ComputedField / NamedField)
ComputedField <- LBRACKET Type RBRACKET COLON Type
NamedField <- FieldName COLON Type
SpreadField <- Attribute* _ SPREAD Type
FieldName <- Identifier '?'? _

EnumDef <- 'enum' _ LPAREN Type RPAREN Identifier _ LBRACE EnumValueList? RBRACE
EnumValueList <- EnumValue (COMMA EnumValue)* COMMA?
EnumValue <- Attribute* _ Identifier _ EQUALS String

DispatchStmt <- 'dispatch' _ DispatchPath _ 'to' _ DispatchTarget
DispatchPath <- 'minecraft:' Identifier LBRACKET DispatchKeyList RBRACKET
DispatchKeyList <- DispatchKey (COMMA DispatchKey)* COMMA?
DispatchKey <- (StaticIndexKey / String / Identifier)
DispatchTarget <- ('struct' _ Identifier _ LBRACE FieldList? RBRACE) / Type

SpreadStruct <- SPREAD 'struct' _ Identifier _ LBRACE FieldList? RBRACE

Type <- (
	UnionType /
	AttributedType /
	ArrayType /
	StructType /
	ConstrainedType /
	PrimitiveType /
	ReferenceType /
	LiteralType
)

AttributedType <- Attribute+ _ (UnionType / ArrayType / ConstrainedType / StructType / PrimitiveType / ReferenceType / LiteralType)

ConstrainedType <- (PrimitiveType / ReferenceType / LiteralType) _ ArrayConstraint

UnionType <- LPAREN Type (PIPE Type)* PIPE? RPAREN
ArrayType <- LBRACKET Type RBRACKET ArrayConstraint?
StructType <- 'struct' _ Identifier? _ LBRACE FieldList? RBRACE
PrimitiveType <- ('string' / 'double' / 'float' / 'int' / 'boolean' / 'any') _
ReferenceType <- (ComplexReference / Identifier)
ComplexReference <- Identifier COLON Identifier (LBRACKET LBRACKET ComplexRefParam RBRACKET RBRACKET / LBRACKET ComplexRefParam RBRACKET)
ComplexRefParam <- (StaticIndexKey / String / Identifier)
StaticIndexKey <- ('%fallback' / '%key' / '%parent' / '%none' / '%unknown') _
LiteralType <- (String / Number / Boolean)

ArrayConstraint <- AT (Range / Number)
Range <- (Number '..' Number?) / ('..' Number)

Attribute <- '#' LBRACKET AttributeList RBRACKET
AttributeList <- AttributeItem (COMMA AttributeItem)*
AttributeItem <- (AttributePair / AttributeCall / Identifier)
AttributeCall <- Identifier LPAREN AttributeParamList? RPAREN
AttributeParamList <- AttributeParam (COMMA AttributeParam)*
AttributeParam <- (AttributePair / AttributeValue)
AttributePair <- Identifier EQUALS AttributeValue
AttributeValue <- (ArrayLiteral / String / Number / Boolean / Identifier)

ArrayLiteral <- LBRACKET (AttributeValue (COMMA AttributeValue)*)? RBRACKET

Comment <- '//' (!EOL .)* (EOL / !.)
DocComment <- '///' (!EOL .)* (EOL / !.)

Identifier <- [a-zA-Z_][a-zA-Z0-9_]* _
String <- '"' (!'"' .)* '"' _
Number <- '-'? [0-9]+ ('.' [0-9]+)? _
Boolean <- ('true' / 'false') _

# Separator tokens with optional trailing whitespace
LBRACE <- '{' _
RBRACE <- '}' _
LBRACKET <- '[' _
RBRACKET <- ']' _
LPAREN <- '(' _
RPAREN <- ')' _
COMMA <- ',' _
COLON <- ':' _
SEMICOLON <- ';' _
EQUALS <- '=' _
PIPE <- '|' _
DOT <- '.' _
SPREAD <- '...' _
AT <- '@' _

DoubleColon <- '::' _
SingleColon <- ':' _

_ <- ([ \t\r\n] / Comment / DocComment)*
EOL <- '\r\n' / '\n' / '\r'