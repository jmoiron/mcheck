package main

// Code generated by peg grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleStart
	ruleStatement
	ruleUseStmt
	rulePath
	rulePathSegments
	rulePathSegment
	ruleTypeAlias
	ruleTypeName
	ruleStructDef
	ruleFieldList
	ruleFieldOrSpread
	ruleField
	ruleComputedField
	ruleNamedField
	ruleSpreadField
	ruleFieldName
	ruleEnumDef
	ruleEnumValueList
	ruleEnumValue
	ruleDispatchStmt
	ruleDispatchPath
	ruleDispatchKeyList
	ruleDispatchKey
	ruleDispatchTarget
	ruleSpreadStruct
	ruleType
	ruleAttributedType
	ruleConstrainedType
	ruleUnionType
	ruleArrayType
	ruleStructType
	ruleGenericType
	ruleGenericTypeParams
	rulePrimitiveType
	ruleReferenceType
	ruleComplexReference
	ruleResourcePath
	ruleComplexRefParam
	ruleDottedPath
	ruleStaticIndexKey
	ruleLiteralType
	ruleArrayConstraint
	ruleRange
	ruleRangeOperator
	ruleAttribute
	ruleAttributeList
	ruleAttributeItem
	ruleAttributeCallWithEquals
	ruleAttributeCall
	ruleAttributeParamList
	ruleAttributeParam
	ruleAttributePair
	ruleAttributeValue
	ruleArrayLiteral
	ruleComment
	ruleDocComment
	ruleIdentifier
	ruleString
	ruleNumber
	ruleBoolean
	ruleLBRACE
	ruleRBRACE
	ruleLBRACKET
	ruleRBRACKET
	ruleLPAREN
	ruleRPAREN
	ruleCOMMA
	ruleCOLON
	ruleSEMICOLON
	ruleEQUALS
	rulePIPE
	ruleDOT
	ruleSPREAD
	ruleAT
	ruleLT
	ruleRT
	ruleDOTDOT
	ruleQUESTION
	ruleDoubleColon
	ruleSingleColon
	rule_
	ruleEOL
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	rulePegText
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
)

var rul3s = [...]string{
	"Unknown",
	"Start",
	"Statement",
	"UseStmt",
	"Path",
	"PathSegments",
	"PathSegment",
	"TypeAlias",
	"TypeName",
	"StructDef",
	"FieldList",
	"FieldOrSpread",
	"Field",
	"ComputedField",
	"NamedField",
	"SpreadField",
	"FieldName",
	"EnumDef",
	"EnumValueList",
	"EnumValue",
	"DispatchStmt",
	"DispatchPath",
	"DispatchKeyList",
	"DispatchKey",
	"DispatchTarget",
	"SpreadStruct",
	"Type",
	"AttributedType",
	"ConstrainedType",
	"UnionType",
	"ArrayType",
	"StructType",
	"GenericType",
	"GenericTypeParams",
	"PrimitiveType",
	"ReferenceType",
	"ComplexReference",
	"ResourcePath",
	"ComplexRefParam",
	"DottedPath",
	"StaticIndexKey",
	"LiteralType",
	"ArrayConstraint",
	"Range",
	"RangeOperator",
	"Attribute",
	"AttributeList",
	"AttributeItem",
	"AttributeCallWithEquals",
	"AttributeCall",
	"AttributeParamList",
	"AttributeParam",
	"AttributePair",
	"AttributeValue",
	"ArrayLiteral",
	"Comment",
	"DocComment",
	"Identifier",
	"String",
	"Number",
	"Boolean",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"COLON",
	"SEMICOLON",
	"EQUALS",
	"PIPE",
	"DOT",
	"SPREAD",
	"AT",
	"LT",
	"RT",
	"DOTDOT",
	"QUESTION",
	"DoubleColon",
	"SingleColon",
	"_",
	"EOL",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"PegText",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type MCDocParser struct {
	StatementBuilder

	Buffer string
	buffer []rune
	rules  [101]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *MCDocParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *MCDocParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *MCDocParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *MCDocParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *MCDocParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *MCDocParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *MCDocParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.Init()
		case ruleAction1:
			p.PrintDebug()
		case ruleAction2:
			p.PopPathAndAddUseStatement()
		case ruleAction3:
			p.BuildPathFromSegments(true)
		case ruleAction4:
			p.BuildPathFromSegments(false)
		case ruleAction5:
			p.PushSuperKeyword()
		case ruleAction6:
			p.BeginStruct()
		case ruleAction7:
			p.EndStruct()
		case ruleAction8:
			p.PopStructAndAddStatement()
		case ruleAction9:
			p.BeginField()
		case ruleAction10:
			p.EndField()
		case ruleAction11:
			p.AddFieldColon()
		case ruleAction12:
			p.MarkFieldOptional()
		case ruleAction13:
			p.PushIdentifier(buffer[begin:end])
		case ruleAction14:
			p.PushString(buffer[begin:end])
		case ruleAction15:
			p.PushNumber(buffer[begin:end])
		case ruleAction16:
			p.PushBoolean(buffer[begin:end])

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*MCDocParser) error {
	return func(p *MCDocParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*MCDocParser) error {
	return func(p *MCDocParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *MCDocParser) Init(options ...func(*MCDocParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Start <- <(Action0 _ Statement* _ !. Action1)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleAction0]() {
					goto l0
				}
				if !_rules[rule_]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleStatement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				if !_rules[rule_]() {
					goto l0
				}
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l0
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				if !_rules[ruleAction1]() {
					goto l0
				}
				add(ruleStart, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Statement <- <(Attribute* _ (UseStmt / TypeAlias / StructDef / EnumDef / DispatchStmt) _)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
			l7:
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[ruleAttribute]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
				if !_rules[rule_]() {
					goto l5
				}
				{
					position9, tokenIndex9 := position, tokenIndex
					if !_rules[ruleUseStmt]() {
						goto l10
					}
					goto l9
				l10:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleTypeAlias]() {
						goto l11
					}
					goto l9
				l11:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleStructDef]() {
						goto l12
					}
					goto l9
				l12:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleEnumDef]() {
						goto l13
					}
					goto l9
				l13:
					position, tokenIndex = position9, tokenIndex9
					if !_rules[ruleDispatchStmt]() {
						goto l5
					}
				}
			l9:
				if !_rules[rule_]() {
					goto l5
				}
				add(ruleStatement, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 2 UseStmt <- <('u' 's' 'e' _ Path Action2)> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if buffer[position] != rune('u') {
					goto l14
				}
				position++
				if buffer[position] != rune('s') {
					goto l14
				}
				position++
				if buffer[position] != rune('e') {
					goto l14
				}
				position++
				if !_rules[rule_]() {
					goto l14
				}
				if !_rules[rulePath]() {
					goto l14
				}
				if !_rules[ruleAction2]() {
					goto l14
				}
				add(ruleUseStmt, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 3 Path <- <((DoubleColon PathSegments Action3) / (PathSegments Action4))> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleDoubleColon]() {
						goto l19
					}
					if !_rules[rulePathSegments]() {
						goto l19
					}
					if !_rules[ruleAction3]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[rulePathSegments]() {
						goto l16
					}
					if !_rules[ruleAction4]() {
						goto l16
					}
				}
			l18:
				add(rulePath, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 PathSegments <- <(PathSegment (DoubleColon PathSegment)*)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				if !_rules[rulePathSegment]() {
					goto l20
				}
			l22:
				{
					position23, tokenIndex23 := position, tokenIndex
					if !_rules[ruleDoubleColon]() {
						goto l23
					}
					if !_rules[rulePathSegment]() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position23, tokenIndex23
				}
				add(rulePathSegments, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 5 PathSegment <- <(('s' 'u' 'p' 'e' 'r' Action5) / Identifier)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l27
					}
					position++
					if buffer[position] != rune('u') {
						goto l27
					}
					position++
					if buffer[position] != rune('p') {
						goto l27
					}
					position++
					if buffer[position] != rune('e') {
						goto l27
					}
					position++
					if buffer[position] != rune('r') {
						goto l27
					}
					position++
					if !_rules[ruleAction5]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleIdentifier]() {
						goto l24
					}
				}
			l26:
				add(rulePathSegment, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 6 TypeAlias <- <('t' 'y' 'p' 'e' _ TypeName _ EQUALS Type)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				if buffer[position] != rune('t') {
					goto l28
				}
				position++
				if buffer[position] != rune('y') {
					goto l28
				}
				position++
				if buffer[position] != rune('p') {
					goto l28
				}
				position++
				if buffer[position] != rune('e') {
					goto l28
				}
				position++
				if !_rules[rule_]() {
					goto l28
				}
				if !_rules[ruleTypeName]() {
					goto l28
				}
				if !_rules[rule_]() {
					goto l28
				}
				if !_rules[ruleEQUALS]() {
					goto l28
				}
				if !_rules[ruleType]() {
					goto l28
				}
				add(ruleTypeAlias, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 7 TypeName <- <(GenericType / Identifier)> */
		func() bool {
			position30, tokenIndex30 := position, tokenIndex
			{
				position31 := position
				{
					position32, tokenIndex32 := position, tokenIndex
					if !_rules[ruleGenericType]() {
						goto l33
					}
					goto l32
				l33:
					position, tokenIndex = position32, tokenIndex32
					if !_rules[ruleIdentifier]() {
						goto l30
					}
				}
			l32:
				add(ruleTypeName, position31)
			}
			return true
		l30:
			position, tokenIndex = position30, tokenIndex30
			return false
		},
		/* 8 StructDef <- <('s' 't' 'r' 'u' 'c' 't' _ Identifier _ LBRACE Action6 FieldList? RBRACE Action7 Action8)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if buffer[position] != rune('s') {
					goto l34
				}
				position++
				if buffer[position] != rune('t') {
					goto l34
				}
				position++
				if buffer[position] != rune('r') {
					goto l34
				}
				position++
				if buffer[position] != rune('u') {
					goto l34
				}
				position++
				if buffer[position] != rune('c') {
					goto l34
				}
				position++
				if buffer[position] != rune('t') {
					goto l34
				}
				position++
				if !_rules[rule_]() {
					goto l34
				}
				if !_rules[ruleIdentifier]() {
					goto l34
				}
				if !_rules[rule_]() {
					goto l34
				}
				if !_rules[ruleLBRACE]() {
					goto l34
				}
				if !_rules[ruleAction6]() {
					goto l34
				}
				{
					position36, tokenIndex36 := position, tokenIndex
					if !_rules[ruleFieldList]() {
						goto l36
					}
					goto l37
				l36:
					position, tokenIndex = position36, tokenIndex36
				}
			l37:
				if !_rules[ruleRBRACE]() {
					goto l34
				}
				if !_rules[ruleAction7]() {
					goto l34
				}
				if !_rules[ruleAction8]() {
					goto l34
				}
				add(ruleStructDef, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 9 FieldList <- <(FieldOrSpread (COMMA FieldOrSpread)* COMMA?)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if !_rules[ruleFieldOrSpread]() {
					goto l38
				}
			l40:
				{
					position41, tokenIndex41 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l41
					}
					if !_rules[ruleFieldOrSpread]() {
						goto l41
					}
					goto l40
				l41:
					position, tokenIndex = position41, tokenIndex41
				}
				{
					position42, tokenIndex42 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l42
					}
					goto l43
				l42:
					position, tokenIndex = position42, tokenIndex42
				}
			l43:
				add(ruleFieldList, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 10 FieldOrSpread <- <(SpreadField / Field)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				{
					position46, tokenIndex46 := position, tokenIndex
					if !_rules[ruleSpreadField]() {
						goto l47
					}
					goto l46
				l47:
					position, tokenIndex = position46, tokenIndex46
					if !_rules[ruleField]() {
						goto l44
					}
				}
			l46:
				add(ruleFieldOrSpread, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 11 Field <- <(Attribute* _ Action9 (ComputedField / NamedField) Action10)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
			l50:
				{
					position51, tokenIndex51 := position, tokenIndex
					if !_rules[ruleAttribute]() {
						goto l51
					}
					goto l50
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				if !_rules[rule_]() {
					goto l48
				}
				if !_rules[ruleAction9]() {
					goto l48
				}
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleComputedField]() {
						goto l53
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[ruleNamedField]() {
						goto l48
					}
				}
			l52:
				if !_rules[ruleAction10]() {
					goto l48
				}
				add(ruleField, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 12 ComputedField <- <(LBRACKET Type RBRACKET QUESTION? COLON Type)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[ruleLBRACKET]() {
					goto l54
				}
				if !_rules[ruleType]() {
					goto l54
				}
				if !_rules[ruleRBRACKET]() {
					goto l54
				}
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[ruleQUESTION]() {
						goto l56
					}
					goto l57
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
			l57:
				if !_rules[ruleCOLON]() {
					goto l54
				}
				if !_rules[ruleType]() {
					goto l54
				}
				add(ruleComputedField, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 13 NamedField <- <(FieldName Action11 COLON Type)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if !_rules[ruleFieldName]() {
					goto l58
				}
				if !_rules[ruleAction11]() {
					goto l58
				}
				if !_rules[ruleCOLON]() {
					goto l58
				}
				if !_rules[ruleType]() {
					goto l58
				}
				add(ruleNamedField, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 14 SpreadField <- <(Attribute* _ SPREAD Type)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
			l62:
				{
					position63, tokenIndex63 := position, tokenIndex
					if !_rules[ruleAttribute]() {
						goto l63
					}
					goto l62
				l63:
					position, tokenIndex = position63, tokenIndex63
				}
				if !_rules[rule_]() {
					goto l60
				}
				if !_rules[ruleSPREAD]() {
					goto l60
				}
				if !_rules[ruleType]() {
					goto l60
				}
				add(ruleSpreadField, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 15 FieldName <- <(Identifier QUESTION? Action12)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if !_rules[ruleIdentifier]() {
					goto l64
				}
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[ruleQUESTION]() {
						goto l66
					}
					goto l67
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
			l67:
				if !_rules[ruleAction12]() {
					goto l64
				}
				add(ruleFieldName, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 16 EnumDef <- <('e' 'n' 'u' 'm' _ LPAREN Type RPAREN Identifier _ LBRACE EnumValueList? RBRACE)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				if buffer[position] != rune('e') {
					goto l68
				}
				position++
				if buffer[position] != rune('n') {
					goto l68
				}
				position++
				if buffer[position] != rune('u') {
					goto l68
				}
				position++
				if buffer[position] != rune('m') {
					goto l68
				}
				position++
				if !_rules[rule_]() {
					goto l68
				}
				if !_rules[ruleLPAREN]() {
					goto l68
				}
				if !_rules[ruleType]() {
					goto l68
				}
				if !_rules[ruleRPAREN]() {
					goto l68
				}
				if !_rules[ruleIdentifier]() {
					goto l68
				}
				if !_rules[rule_]() {
					goto l68
				}
				if !_rules[ruleLBRACE]() {
					goto l68
				}
				{
					position70, tokenIndex70 := position, tokenIndex
					if !_rules[ruleEnumValueList]() {
						goto l70
					}
					goto l71
				l70:
					position, tokenIndex = position70, tokenIndex70
				}
			l71:
				if !_rules[ruleRBRACE]() {
					goto l68
				}
				add(ruleEnumDef, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 17 EnumValueList <- <(EnumValue (COMMA EnumValue)* COMMA?)> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				if !_rules[ruleEnumValue]() {
					goto l72
				}
			l74:
				{
					position75, tokenIndex75 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l75
					}
					if !_rules[ruleEnumValue]() {
						goto l75
					}
					goto l74
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
				{
					position76, tokenIndex76 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l76
					}
					goto l77
				l76:
					position, tokenIndex = position76, tokenIndex76
				}
			l77:
				add(ruleEnumValueList, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 18 EnumValue <- <(Attribute* _ Identifier _ EQUALS String)> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
			l80:
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[ruleAttribute]() {
						goto l81
					}
					goto l80
				l81:
					position, tokenIndex = position81, tokenIndex81
				}
				if !_rules[rule_]() {
					goto l78
				}
				if !_rules[ruleIdentifier]() {
					goto l78
				}
				if !_rules[rule_]() {
					goto l78
				}
				if !_rules[ruleEQUALS]() {
					goto l78
				}
				if !_rules[ruleString]() {
					goto l78
				}
				add(ruleEnumValue, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 19 DispatchStmt <- <('d' 'i' 's' 'p' 'a' 't' 'c' 'h' _ DispatchPath _ ('t' 'o') _ DispatchTarget)> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				if buffer[position] != rune('d') {
					goto l82
				}
				position++
				if buffer[position] != rune('i') {
					goto l82
				}
				position++
				if buffer[position] != rune('s') {
					goto l82
				}
				position++
				if buffer[position] != rune('p') {
					goto l82
				}
				position++
				if buffer[position] != rune('a') {
					goto l82
				}
				position++
				if buffer[position] != rune('t') {
					goto l82
				}
				position++
				if buffer[position] != rune('c') {
					goto l82
				}
				position++
				if buffer[position] != rune('h') {
					goto l82
				}
				position++
				if !_rules[rule_]() {
					goto l82
				}
				if !_rules[ruleDispatchPath]() {
					goto l82
				}
				if !_rules[rule_]() {
					goto l82
				}
				if buffer[position] != rune('t') {
					goto l82
				}
				position++
				if buffer[position] != rune('o') {
					goto l82
				}
				position++
				if !_rules[rule_]() {
					goto l82
				}
				if !_rules[ruleDispatchTarget]() {
					goto l82
				}
				add(ruleDispatchStmt, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 20 DispatchPath <- <(Identifier COLON ResourcePath LBRACKET DispatchKeyList RBRACKET (LT GenericTypeParams RT)?)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if !_rules[ruleIdentifier]() {
					goto l84
				}
				if !_rules[ruleCOLON]() {
					goto l84
				}
				if !_rules[ruleResourcePath]() {
					goto l84
				}
				if !_rules[ruleLBRACKET]() {
					goto l84
				}
				if !_rules[ruleDispatchKeyList]() {
					goto l84
				}
				if !_rules[ruleRBRACKET]() {
					goto l84
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					if !_rules[ruleLT]() {
						goto l86
					}
					if !_rules[ruleGenericTypeParams]() {
						goto l86
					}
					if !_rules[ruleRT]() {
						goto l86
					}
					goto l87
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
			l87:
				add(ruleDispatchPath, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 21 DispatchKeyList <- <(DispatchKey (COMMA DispatchKey)* COMMA?)> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if !_rules[ruleDispatchKey]() {
					goto l88
				}
			l90:
				{
					position91, tokenIndex91 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l91
					}
					if !_rules[ruleDispatchKey]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position91, tokenIndex91
				}
				{
					position92, tokenIndex92 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l92
					}
					goto l93
				l92:
					position, tokenIndex = position92, tokenIndex92
				}
			l93:
				add(ruleDispatchKeyList, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 22 DispatchKey <- <(StaticIndexKey / String / Identifier)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				{
					position96, tokenIndex96 := position, tokenIndex
					if !_rules[ruleStaticIndexKey]() {
						goto l97
					}
					goto l96
				l97:
					position, tokenIndex = position96, tokenIndex96
					if !_rules[ruleString]() {
						goto l98
					}
					goto l96
				l98:
					position, tokenIndex = position96, tokenIndex96
					if !_rules[ruleIdentifier]() {
						goto l94
					}
				}
			l96:
				add(ruleDispatchKey, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 23 DispatchTarget <- <(('s' 't' 'r' 'u' 'c' 't' _ Identifier _ LBRACE FieldList? RBRACE) / Type)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				{
					position101, tokenIndex101 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l102
					}
					position++
					if buffer[position] != rune('t') {
						goto l102
					}
					position++
					if buffer[position] != rune('r') {
						goto l102
					}
					position++
					if buffer[position] != rune('u') {
						goto l102
					}
					position++
					if buffer[position] != rune('c') {
						goto l102
					}
					position++
					if buffer[position] != rune('t') {
						goto l102
					}
					position++
					if !_rules[rule_]() {
						goto l102
					}
					if !_rules[ruleIdentifier]() {
						goto l102
					}
					if !_rules[rule_]() {
						goto l102
					}
					if !_rules[ruleLBRACE]() {
						goto l102
					}
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[ruleFieldList]() {
							goto l103
						}
						goto l104
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l104:
					if !_rules[ruleRBRACE]() {
						goto l102
					}
					goto l101
				l102:
					position, tokenIndex = position101, tokenIndex101
					if !_rules[ruleType]() {
						goto l99
					}
				}
			l101:
				add(ruleDispatchTarget, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 24 SpreadStruct <- <(SPREAD ('s' 't' 'r' 'u' 'c' 't') _ Identifier _ LBRACE FieldList? RBRACE)> */
		nil,
		/* 25 Type <- <(UnionType / AttributedType / ArrayType / StructType / ConstrainedType / GenericType / PrimitiveType / ReferenceType / LiteralType)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position108, tokenIndex108 := position, tokenIndex
					if !_rules[ruleUnionType]() {
						goto l109
					}
					goto l108
				l109:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleAttributedType]() {
						goto l110
					}
					goto l108
				l110:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleArrayType]() {
						goto l111
					}
					goto l108
				l111:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleStructType]() {
						goto l112
					}
					goto l108
				l112:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleConstrainedType]() {
						goto l113
					}
					goto l108
				l113:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleGenericType]() {
						goto l114
					}
					goto l108
				l114:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[rulePrimitiveType]() {
						goto l115
					}
					goto l108
				l115:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleReferenceType]() {
						goto l116
					}
					goto l108
				l116:
					position, tokenIndex = position108, tokenIndex108
					if !_rules[ruleLiteralType]() {
						goto l106
					}
				}
			l108:
				add(ruleType, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 26 AttributedType <- <(Attribute+ _ (UnionType / ArrayType / ConstrainedType / StructType / GenericType / PrimitiveType / ReferenceType / LiteralType))> */
		func() bool {
			position117, tokenIndex117 := position, tokenIndex
			{
				position118 := position
				if !_rules[ruleAttribute]() {
					goto l117
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[ruleAttribute]() {
						goto l120
					}
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				if !_rules[rule_]() {
					goto l117
				}
				{
					position121, tokenIndex121 := position, tokenIndex
					if !_rules[ruleUnionType]() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleArrayType]() {
						goto l123
					}
					goto l121
				l123:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleConstrainedType]() {
						goto l124
					}
					goto l121
				l124:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleStructType]() {
						goto l125
					}
					goto l121
				l125:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleGenericType]() {
						goto l126
					}
					goto l121
				l126:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[rulePrimitiveType]() {
						goto l127
					}
					goto l121
				l127:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleReferenceType]() {
						goto l128
					}
					goto l121
				l128:
					position, tokenIndex = position121, tokenIndex121
					if !_rules[ruleLiteralType]() {
						goto l117
					}
				}
			l121:
				add(ruleAttributedType, position118)
			}
			return true
		l117:
			position, tokenIndex = position117, tokenIndex117
			return false
		},
		/* 27 ConstrainedType <- <((PrimitiveType / ReferenceType / LiteralType) ArrayConstraint)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				{
					position131, tokenIndex131 := position, tokenIndex
					if !_rules[rulePrimitiveType]() {
						goto l132
					}
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					if !_rules[ruleReferenceType]() {
						goto l133
					}
					goto l131
				l133:
					position, tokenIndex = position131, tokenIndex131
					if !_rules[ruleLiteralType]() {
						goto l129
					}
				}
			l131:
				if !_rules[ruleArrayConstraint]() {
					goto l129
				}
				add(ruleConstrainedType, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 28 UnionType <- <(LPAREN Type (PIPE Type)* PIPE? RPAREN)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if !_rules[ruleLPAREN]() {
					goto l134
				}
				if !_rules[ruleType]() {
					goto l134
				}
			l136:
				{
					position137, tokenIndex137 := position, tokenIndex
					if !_rules[rulePIPE]() {
						goto l137
					}
					if !_rules[ruleType]() {
						goto l137
					}
					goto l136
				l137:
					position, tokenIndex = position137, tokenIndex137
				}
				{
					position138, tokenIndex138 := position, tokenIndex
					if !_rules[rulePIPE]() {
						goto l138
					}
					goto l139
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
			l139:
				if !_rules[ruleRPAREN]() {
					goto l134
				}
				add(ruleUnionType, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
		/* 29 ArrayType <- <((LBRACKET Type RBRACKET ArrayConstraint?) / (PrimitiveType LBRACKET RBRACKET) / (ReferenceType LBRACKET RBRACKET))> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				{
					position142, tokenIndex142 := position, tokenIndex
					if !_rules[ruleLBRACKET]() {
						goto l143
					}
					if !_rules[ruleType]() {
						goto l143
					}
					if !_rules[ruleRBRACKET]() {
						goto l143
					}
					{
						position144, tokenIndex144 := position, tokenIndex
						if !_rules[ruleArrayConstraint]() {
							goto l144
						}
						goto l145
					l144:
						position, tokenIndex = position144, tokenIndex144
					}
				l145:
					goto l142
				l143:
					position, tokenIndex = position142, tokenIndex142
					if !_rules[rulePrimitiveType]() {
						goto l146
					}
					if !_rules[ruleLBRACKET]() {
						goto l146
					}
					if !_rules[ruleRBRACKET]() {
						goto l146
					}
					goto l142
				l146:
					position, tokenIndex = position142, tokenIndex142
					if !_rules[ruleReferenceType]() {
						goto l140
					}
					if !_rules[ruleLBRACKET]() {
						goto l140
					}
					if !_rules[ruleRBRACKET]() {
						goto l140
					}
				}
			l142:
				add(ruleArrayType, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 30 StructType <- <('s' 't' 'r' 'u' 'c' 't' _ Identifier? _ LBRACE FieldList? RBRACE)> */
		func() bool {
			position147, tokenIndex147 := position, tokenIndex
			{
				position148 := position
				if buffer[position] != rune('s') {
					goto l147
				}
				position++
				if buffer[position] != rune('t') {
					goto l147
				}
				position++
				if buffer[position] != rune('r') {
					goto l147
				}
				position++
				if buffer[position] != rune('u') {
					goto l147
				}
				position++
				if buffer[position] != rune('c') {
					goto l147
				}
				position++
				if buffer[position] != rune('t') {
					goto l147
				}
				position++
				if !_rules[rule_]() {
					goto l147
				}
				{
					position149, tokenIndex149 := position, tokenIndex
					if !_rules[ruleIdentifier]() {
						goto l149
					}
					goto l150
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
			l150:
				if !_rules[rule_]() {
					goto l147
				}
				if !_rules[ruleLBRACE]() {
					goto l147
				}
				{
					position151, tokenIndex151 := position, tokenIndex
					if !_rules[ruleFieldList]() {
						goto l151
					}
					goto l152
				l151:
					position, tokenIndex = position151, tokenIndex151
				}
			l152:
				if !_rules[ruleRBRACE]() {
					goto l147
				}
				add(ruleStructType, position148)
			}
			return true
		l147:
			position, tokenIndex = position147, tokenIndex147
			return false
		},
		/* 31 GenericType <- <(Identifier LT GenericTypeParams RT)> */
		func() bool {
			position153, tokenIndex153 := position, tokenIndex
			{
				position154 := position
				if !_rules[ruleIdentifier]() {
					goto l153
				}
				if !_rules[ruleLT]() {
					goto l153
				}
				if !_rules[ruleGenericTypeParams]() {
					goto l153
				}
				if !_rules[ruleRT]() {
					goto l153
				}
				add(ruleGenericType, position154)
			}
			return true
		l153:
			position, tokenIndex = position153, tokenIndex153
			return false
		},
		/* 32 GenericTypeParams <- <(Type (COMMA Type)*)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if !_rules[ruleType]() {
					goto l155
				}
			l157:
				{
					position158, tokenIndex158 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l158
					}
					if !_rules[ruleType]() {
						goto l158
					}
					goto l157
				l158:
					position, tokenIndex = position158, tokenIndex158
				}
				add(ruleGenericTypeParams, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 33 PrimitiveType <- <((('s' 't' 'r' 'i' 'n' 'g') / ('d' 'o' 'u' 'b' 'l' 'e') / ('f' 'l' 'o' 'a' 't') / ('i' 'n' 't') / ('b' 'o' 'o' 'l' 'e' 'a' 'n') / ('a' 'n' 'y')) _)> */
		func() bool {
			position159, tokenIndex159 := position, tokenIndex
			{
				position160 := position
				{
					position161, tokenIndex161 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l162
					}
					position++
					if buffer[position] != rune('t') {
						goto l162
					}
					position++
					if buffer[position] != rune('r') {
						goto l162
					}
					position++
					if buffer[position] != rune('i') {
						goto l162
					}
					position++
					if buffer[position] != rune('n') {
						goto l162
					}
					position++
					if buffer[position] != rune('g') {
						goto l162
					}
					position++
					goto l161
				l162:
					position, tokenIndex = position161, tokenIndex161
					if buffer[position] != rune('d') {
						goto l163
					}
					position++
					if buffer[position] != rune('o') {
						goto l163
					}
					position++
					if buffer[position] != rune('u') {
						goto l163
					}
					position++
					if buffer[position] != rune('b') {
						goto l163
					}
					position++
					if buffer[position] != rune('l') {
						goto l163
					}
					position++
					if buffer[position] != rune('e') {
						goto l163
					}
					position++
					goto l161
				l163:
					position, tokenIndex = position161, tokenIndex161
					if buffer[position] != rune('f') {
						goto l164
					}
					position++
					if buffer[position] != rune('l') {
						goto l164
					}
					position++
					if buffer[position] != rune('o') {
						goto l164
					}
					position++
					if buffer[position] != rune('a') {
						goto l164
					}
					position++
					if buffer[position] != rune('t') {
						goto l164
					}
					position++
					goto l161
				l164:
					position, tokenIndex = position161, tokenIndex161
					if buffer[position] != rune('i') {
						goto l165
					}
					position++
					if buffer[position] != rune('n') {
						goto l165
					}
					position++
					if buffer[position] != rune('t') {
						goto l165
					}
					position++
					goto l161
				l165:
					position, tokenIndex = position161, tokenIndex161
					if buffer[position] != rune('b') {
						goto l166
					}
					position++
					if buffer[position] != rune('o') {
						goto l166
					}
					position++
					if buffer[position] != rune('o') {
						goto l166
					}
					position++
					if buffer[position] != rune('l') {
						goto l166
					}
					position++
					if buffer[position] != rune('e') {
						goto l166
					}
					position++
					if buffer[position] != rune('a') {
						goto l166
					}
					position++
					if buffer[position] != rune('n') {
						goto l166
					}
					position++
					goto l161
				l166:
					position, tokenIndex = position161, tokenIndex161
					if buffer[position] != rune('a') {
						goto l159
					}
					position++
					if buffer[position] != rune('n') {
						goto l159
					}
					position++
					if buffer[position] != rune('y') {
						goto l159
					}
					position++
				}
			l161:
				if !_rules[rule_]() {
					goto l159
				}
				add(rulePrimitiveType, position160)
			}
			return true
		l159:
			position, tokenIndex = position159, tokenIndex159
			return false
		},
		/* 34 ReferenceType <- <(ComplexReference / Path / Identifier)> */
		func() bool {
			position167, tokenIndex167 := position, tokenIndex
			{
				position168 := position
				{
					position169, tokenIndex169 := position, tokenIndex
					if !_rules[ruleComplexReference]() {
						goto l170
					}
					goto l169
				l170:
					position, tokenIndex = position169, tokenIndex169
					if !_rules[rulePath]() {
						goto l171
					}
					goto l169
				l171:
					position, tokenIndex = position169, tokenIndex169
					if !_rules[ruleIdentifier]() {
						goto l167
					}
				}
			l169:
				add(ruleReferenceType, position168)
			}
			return true
		l167:
			position, tokenIndex = position167, tokenIndex167
			return false
		},
		/* 35 ComplexReference <- <(Identifier COLON ResourcePath ((LBRACKET LBRACKET ComplexRefParam RBRACKET RBRACKET) / (LBRACKET ComplexRefParam RBRACKET)) (LT GenericTypeParams RT)?)> */
		func() bool {
			position172, tokenIndex172 := position, tokenIndex
			{
				position173 := position
				if !_rules[ruleIdentifier]() {
					goto l172
				}
				if !_rules[ruleCOLON]() {
					goto l172
				}
				if !_rules[ruleResourcePath]() {
					goto l172
				}
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[ruleLBRACKET]() {
						goto l175
					}
					if !_rules[ruleLBRACKET]() {
						goto l175
					}
					if !_rules[ruleComplexRefParam]() {
						goto l175
					}
					if !_rules[ruleRBRACKET]() {
						goto l175
					}
					if !_rules[ruleRBRACKET]() {
						goto l175
					}
					goto l174
				l175:
					position, tokenIndex = position174, tokenIndex174
					if !_rules[ruleLBRACKET]() {
						goto l172
					}
					if !_rules[ruleComplexRefParam]() {
						goto l172
					}
					if !_rules[ruleRBRACKET]() {
						goto l172
					}
				}
			l174:
				{
					position176, tokenIndex176 := position, tokenIndex
					if !_rules[ruleLT]() {
						goto l176
					}
					if !_rules[ruleGenericTypeParams]() {
						goto l176
					}
					if !_rules[ruleRT]() {
						goto l176
					}
					goto l177
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
			l177:
				add(ruleComplexReference, position173)
			}
			return true
		l172:
			position, tokenIndex = position172, tokenIndex172
			return false
		},
		/* 36 ResourcePath <- <(Identifier ('/' Identifier)*)> */
		func() bool {
			position178, tokenIndex178 := position, tokenIndex
			{
				position179 := position
				if !_rules[ruleIdentifier]() {
					goto l178
				}
			l180:
				{
					position181, tokenIndex181 := position, tokenIndex
					if buffer[position] != rune('/') {
						goto l181
					}
					position++
					if !_rules[ruleIdentifier]() {
						goto l181
					}
					goto l180
				l181:
					position, tokenIndex = position181, tokenIndex181
				}
				add(ruleResourcePath, position179)
			}
			return true
		l178:
			position, tokenIndex = position178, tokenIndex178
			return false
		},
		/* 37 ComplexRefParam <- <(DottedPath / StaticIndexKey / String / Identifier)> */
		func() bool {
			position182, tokenIndex182 := position, tokenIndex
			{
				position183 := position
				{
					position184, tokenIndex184 := position, tokenIndex
					if !_rules[ruleDottedPath]() {
						goto l185
					}
					goto l184
				l185:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleStaticIndexKey]() {
						goto l186
					}
					goto l184
				l186:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleString]() {
						goto l187
					}
					goto l184
				l187:
					position, tokenIndex = position184, tokenIndex184
					if !_rules[ruleIdentifier]() {
						goto l182
					}
				}
			l184:
				add(ruleComplexRefParam, position183)
			}
			return true
		l182:
			position, tokenIndex = position182, tokenIndex182
			return false
		},
		/* 38 DottedPath <- <((StaticIndexKey / Identifier) ('.' Identifier)+)> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				{
					position190, tokenIndex190 := position, tokenIndex
					if !_rules[ruleStaticIndexKey]() {
						goto l191
					}
					goto l190
				l191:
					position, tokenIndex = position190, tokenIndex190
					if !_rules[ruleIdentifier]() {
						goto l188
					}
				}
			l190:
				if buffer[position] != rune('.') {
					goto l188
				}
				position++
				if !_rules[ruleIdentifier]() {
					goto l188
				}
			l192:
				{
					position193, tokenIndex193 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l193
					}
					position++
					if !_rules[ruleIdentifier]() {
						goto l193
					}
					goto l192
				l193:
					position, tokenIndex = position193, tokenIndex193
				}
				add(ruleDottedPath, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 39 StaticIndexKey <- <((('%' 'f' 'a' 'l' 'l' 'b' 'a' 'c' 'k') / ('%' 'k' 'e' 'y') / ('%' 'p' 'a' 'r' 'e' 'n' 't') / ('%' 'n' 'o' 'n' 'e') / ('%' 'u' 'n' 'k' 'n' 'o' 'w' 'n')) _)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				{
					position196, tokenIndex196 := position, tokenIndex
					if buffer[position] != rune('%') {
						goto l197
					}
					position++
					if buffer[position] != rune('f') {
						goto l197
					}
					position++
					if buffer[position] != rune('a') {
						goto l197
					}
					position++
					if buffer[position] != rune('l') {
						goto l197
					}
					position++
					if buffer[position] != rune('l') {
						goto l197
					}
					position++
					if buffer[position] != rune('b') {
						goto l197
					}
					position++
					if buffer[position] != rune('a') {
						goto l197
					}
					position++
					if buffer[position] != rune('c') {
						goto l197
					}
					position++
					if buffer[position] != rune('k') {
						goto l197
					}
					position++
					goto l196
				l197:
					position, tokenIndex = position196, tokenIndex196
					if buffer[position] != rune('%') {
						goto l198
					}
					position++
					if buffer[position] != rune('k') {
						goto l198
					}
					position++
					if buffer[position] != rune('e') {
						goto l198
					}
					position++
					if buffer[position] != rune('y') {
						goto l198
					}
					position++
					goto l196
				l198:
					position, tokenIndex = position196, tokenIndex196
					if buffer[position] != rune('%') {
						goto l199
					}
					position++
					if buffer[position] != rune('p') {
						goto l199
					}
					position++
					if buffer[position] != rune('a') {
						goto l199
					}
					position++
					if buffer[position] != rune('r') {
						goto l199
					}
					position++
					if buffer[position] != rune('e') {
						goto l199
					}
					position++
					if buffer[position] != rune('n') {
						goto l199
					}
					position++
					if buffer[position] != rune('t') {
						goto l199
					}
					position++
					goto l196
				l199:
					position, tokenIndex = position196, tokenIndex196
					if buffer[position] != rune('%') {
						goto l200
					}
					position++
					if buffer[position] != rune('n') {
						goto l200
					}
					position++
					if buffer[position] != rune('o') {
						goto l200
					}
					position++
					if buffer[position] != rune('n') {
						goto l200
					}
					position++
					if buffer[position] != rune('e') {
						goto l200
					}
					position++
					goto l196
				l200:
					position, tokenIndex = position196, tokenIndex196
					if buffer[position] != rune('%') {
						goto l194
					}
					position++
					if buffer[position] != rune('u') {
						goto l194
					}
					position++
					if buffer[position] != rune('n') {
						goto l194
					}
					position++
					if buffer[position] != rune('k') {
						goto l194
					}
					position++
					if buffer[position] != rune('n') {
						goto l194
					}
					position++
					if buffer[position] != rune('o') {
						goto l194
					}
					position++
					if buffer[position] != rune('w') {
						goto l194
					}
					position++
					if buffer[position] != rune('n') {
						goto l194
					}
					position++
				}
			l196:
				if !_rules[rule_]() {
					goto l194
				}
				add(ruleStaticIndexKey, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 40 LiteralType <- <(String / Number / Boolean)> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				{
					position203, tokenIndex203 := position, tokenIndex
					if !_rules[ruleString]() {
						goto l204
					}
					goto l203
				l204:
					position, tokenIndex = position203, tokenIndex203
					if !_rules[ruleNumber]() {
						goto l205
					}
					goto l203
				l205:
					position, tokenIndex = position203, tokenIndex203
					if !_rules[ruleBoolean]() {
						goto l201
					}
				}
			l203:
				add(ruleLiteralType, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 41 ArrayConstraint <- <(AT (Range / Number))> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				if !_rules[ruleAT]() {
					goto l206
				}
				{
					position208, tokenIndex208 := position, tokenIndex
					if !_rules[ruleRange]() {
						goto l209
					}
					goto l208
				l209:
					position, tokenIndex = position208, tokenIndex208
					if !_rules[ruleNumber]() {
						goto l206
					}
				}
			l208:
				add(ruleArrayConstraint, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 42 Range <- <((Number RangeOperator Number) / (Number RangeOperator) / (RangeOperator Number))> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				{
					position212, tokenIndex212 := position, tokenIndex
					if !_rules[ruleNumber]() {
						goto l213
					}
					if !_rules[ruleRangeOperator]() {
						goto l213
					}
					if !_rules[ruleNumber]() {
						goto l213
					}
					goto l212
				l213:
					position, tokenIndex = position212, tokenIndex212
					if !_rules[ruleNumber]() {
						goto l214
					}
					if !_rules[ruleRangeOperator]() {
						goto l214
					}
					goto l212
				l214:
					position, tokenIndex = position212, tokenIndex212
					if !_rules[ruleRangeOperator]() {
						goto l210
					}
					if !_rules[ruleNumber]() {
						goto l210
					}
				}
			l212:
				add(ruleRange, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 43 RangeOperator <- <(LT? DOTDOT LT?)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				{
					position217, tokenIndex217 := position, tokenIndex
					if !_rules[ruleLT]() {
						goto l217
					}
					goto l218
				l217:
					position, tokenIndex = position217, tokenIndex217
				}
			l218:
				if !_rules[ruleDOTDOT]() {
					goto l215
				}
				{
					position219, tokenIndex219 := position, tokenIndex
					if !_rules[ruleLT]() {
						goto l219
					}
					goto l220
				l219:
					position, tokenIndex = position219, tokenIndex219
				}
			l220:
				add(ruleRangeOperator, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 44 Attribute <- <('#' LBRACKET AttributeList RBRACKET)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				if buffer[position] != rune('#') {
					goto l221
				}
				position++
				if !_rules[ruleLBRACKET]() {
					goto l221
				}
				if !_rules[ruleAttributeList]() {
					goto l221
				}
				if !_rules[ruleRBRACKET]() {
					goto l221
				}
				add(ruleAttribute, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 45 AttributeList <- <(AttributeItem (COMMA AttributeItem)*)> */
		func() bool {
			position223, tokenIndex223 := position, tokenIndex
			{
				position224 := position
				if !_rules[ruleAttributeItem]() {
					goto l223
				}
			l225:
				{
					position226, tokenIndex226 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l226
					}
					if !_rules[ruleAttributeItem]() {
						goto l226
					}
					goto l225
				l226:
					position, tokenIndex = position226, tokenIndex226
				}
				add(ruleAttributeList, position224)
			}
			return true
		l223:
			position, tokenIndex = position223, tokenIndex223
			return false
		},
		/* 46 AttributeItem <- <(AttributePair / AttributeCall / AttributeCallWithEquals / Identifier)> */
		func() bool {
			position227, tokenIndex227 := position, tokenIndex
			{
				position228 := position
				{
					position229, tokenIndex229 := position, tokenIndex
					if !_rules[ruleAttributePair]() {
						goto l230
					}
					goto l229
				l230:
					position, tokenIndex = position229, tokenIndex229
					if !_rules[ruleAttributeCall]() {
						goto l231
					}
					goto l229
				l231:
					position, tokenIndex = position229, tokenIndex229
					if !_rules[ruleAttributeCallWithEquals]() {
						goto l232
					}
					goto l229
				l232:
					position, tokenIndex = position229, tokenIndex229
					if !_rules[ruleIdentifier]() {
						goto l227
					}
				}
			l229:
				add(ruleAttributeItem, position228)
			}
			return true
		l227:
			position, tokenIndex = position227, tokenIndex227
			return false
		},
		/* 47 AttributeCallWithEquals <- <(Identifier EQUALS LPAREN AttributeParamList? RPAREN)> */
		func() bool {
			position233, tokenIndex233 := position, tokenIndex
			{
				position234 := position
				if !_rules[ruleIdentifier]() {
					goto l233
				}
				if !_rules[ruleEQUALS]() {
					goto l233
				}
				if !_rules[ruleLPAREN]() {
					goto l233
				}
				{
					position235, tokenIndex235 := position, tokenIndex
					if !_rules[ruleAttributeParamList]() {
						goto l235
					}
					goto l236
				l235:
					position, tokenIndex = position235, tokenIndex235
				}
			l236:
				if !_rules[ruleRPAREN]() {
					goto l233
				}
				add(ruleAttributeCallWithEquals, position234)
			}
			return true
		l233:
			position, tokenIndex = position233, tokenIndex233
			return false
		},
		/* 48 AttributeCall <- <(Identifier LPAREN AttributeParamList? RPAREN)> */
		func() bool {
			position237, tokenIndex237 := position, tokenIndex
			{
				position238 := position
				if !_rules[ruleIdentifier]() {
					goto l237
				}
				if !_rules[ruleLPAREN]() {
					goto l237
				}
				{
					position239, tokenIndex239 := position, tokenIndex
					if !_rules[ruleAttributeParamList]() {
						goto l239
					}
					goto l240
				l239:
					position, tokenIndex = position239, tokenIndex239
				}
			l240:
				if !_rules[ruleRPAREN]() {
					goto l237
				}
				add(ruleAttributeCall, position238)
			}
			return true
		l237:
			position, tokenIndex = position237, tokenIndex237
			return false
		},
		/* 49 AttributeParamList <- <(AttributeParam (COMMA AttributeParam)*)> */
		func() bool {
			position241, tokenIndex241 := position, tokenIndex
			{
				position242 := position
				if !_rules[ruleAttributeParam]() {
					goto l241
				}
			l243:
				{
					position244, tokenIndex244 := position, tokenIndex
					if !_rules[ruleCOMMA]() {
						goto l244
					}
					if !_rules[ruleAttributeParam]() {
						goto l244
					}
					goto l243
				l244:
					position, tokenIndex = position244, tokenIndex244
				}
				add(ruleAttributeParamList, position242)
			}
			return true
		l241:
			position, tokenIndex = position241, tokenIndex241
			return false
		},
		/* 50 AttributeParam <- <(AttributePair / AttributeValue)> */
		func() bool {
			position245, tokenIndex245 := position, tokenIndex
			{
				position246 := position
				{
					position247, tokenIndex247 := position, tokenIndex
					if !_rules[ruleAttributePair]() {
						goto l248
					}
					goto l247
				l248:
					position, tokenIndex = position247, tokenIndex247
					if !_rules[ruleAttributeValue]() {
						goto l245
					}
				}
			l247:
				add(ruleAttributeParam, position246)
			}
			return true
		l245:
			position, tokenIndex = position245, tokenIndex245
			return false
		},
		/* 51 AttributePair <- <(Identifier EQUALS AttributeValue)> */
		func() bool {
			position249, tokenIndex249 := position, tokenIndex
			{
				position250 := position
				if !_rules[ruleIdentifier]() {
					goto l249
				}
				if !_rules[ruleEQUALS]() {
					goto l249
				}
				if !_rules[ruleAttributeValue]() {
					goto l249
				}
				add(ruleAttributePair, position250)
			}
			return true
		l249:
			position, tokenIndex = position249, tokenIndex249
			return false
		},
		/* 52 AttributeValue <- <(ArrayLiteral / ComplexReference / String / Number / Boolean / Identifier)> */
		func() bool {
			position251, tokenIndex251 := position, tokenIndex
			{
				position252 := position
				{
					position253, tokenIndex253 := position, tokenIndex
					if !_rules[ruleArrayLiteral]() {
						goto l254
					}
					goto l253
				l254:
					position, tokenIndex = position253, tokenIndex253
					if !_rules[ruleComplexReference]() {
						goto l255
					}
					goto l253
				l255:
					position, tokenIndex = position253, tokenIndex253
					if !_rules[ruleString]() {
						goto l256
					}
					goto l253
				l256:
					position, tokenIndex = position253, tokenIndex253
					if !_rules[ruleNumber]() {
						goto l257
					}
					goto l253
				l257:
					position, tokenIndex = position253, tokenIndex253
					if !_rules[ruleBoolean]() {
						goto l258
					}
					goto l253
				l258:
					position, tokenIndex = position253, tokenIndex253
					if !_rules[ruleIdentifier]() {
						goto l251
					}
				}
			l253:
				add(ruleAttributeValue, position252)
			}
			return true
		l251:
			position, tokenIndex = position251, tokenIndex251
			return false
		},
		/* 53 ArrayLiteral <- <(LBRACKET (AttributeValue (COMMA AttributeValue)*)? RBRACKET)> */
		func() bool {
			position259, tokenIndex259 := position, tokenIndex
			{
				position260 := position
				if !_rules[ruleLBRACKET]() {
					goto l259
				}
				{
					position261, tokenIndex261 := position, tokenIndex
					if !_rules[ruleAttributeValue]() {
						goto l261
					}
				l263:
					{
						position264, tokenIndex264 := position, tokenIndex
						if !_rules[ruleCOMMA]() {
							goto l264
						}
						if !_rules[ruleAttributeValue]() {
							goto l264
						}
						goto l263
					l264:
						position, tokenIndex = position264, tokenIndex264
					}
					goto l262
				l261:
					position, tokenIndex = position261, tokenIndex261
				}
			l262:
				if !_rules[ruleRBRACKET]() {
					goto l259
				}
				add(ruleArrayLiteral, position260)
			}
			return true
		l259:
			position, tokenIndex = position259, tokenIndex259
			return false
		},
		/* 54 Comment <- <('/' '/' (!EOL .)* (EOL / !.))> */
		func() bool {
			position265, tokenIndex265 := position, tokenIndex
			{
				position266 := position
				if buffer[position] != rune('/') {
					goto l265
				}
				position++
				if buffer[position] != rune('/') {
					goto l265
				}
				position++
			l267:
				{
					position268, tokenIndex268 := position, tokenIndex
					{
						position269, tokenIndex269 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l269
						}
						goto l268
					l269:
						position, tokenIndex = position269, tokenIndex269
					}
					if !matchDot() {
						goto l268
					}
					goto l267
				l268:
					position, tokenIndex = position268, tokenIndex268
				}
				{
					position270, tokenIndex270 := position, tokenIndex
					if !_rules[ruleEOL]() {
						goto l271
					}
					goto l270
				l271:
					position, tokenIndex = position270, tokenIndex270
					{
						position272, tokenIndex272 := position, tokenIndex
						if !matchDot() {
							goto l272
						}
						goto l265
					l272:
						position, tokenIndex = position272, tokenIndex272
					}
				}
			l270:
				add(ruleComment, position266)
			}
			return true
		l265:
			position, tokenIndex = position265, tokenIndex265
			return false
		},
		/* 55 DocComment <- <('/' '/' '/' (!EOL .)* (EOL / !.))> */
		func() bool {
			position273, tokenIndex273 := position, tokenIndex
			{
				position274 := position
				if buffer[position] != rune('/') {
					goto l273
				}
				position++
				if buffer[position] != rune('/') {
					goto l273
				}
				position++
				if buffer[position] != rune('/') {
					goto l273
				}
				position++
			l275:
				{
					position276, tokenIndex276 := position, tokenIndex
					{
						position277, tokenIndex277 := position, tokenIndex
						if !_rules[ruleEOL]() {
							goto l277
						}
						goto l276
					l277:
						position, tokenIndex = position277, tokenIndex277
					}
					if !matchDot() {
						goto l276
					}
					goto l275
				l276:
					position, tokenIndex = position276, tokenIndex276
				}
				{
					position278, tokenIndex278 := position, tokenIndex
					if !_rules[ruleEOL]() {
						goto l279
					}
					goto l278
				l279:
					position, tokenIndex = position278, tokenIndex278
					{
						position280, tokenIndex280 := position, tokenIndex
						if !matchDot() {
							goto l280
						}
						goto l273
					l280:
						position, tokenIndex = position280, tokenIndex280
					}
				}
			l278:
				add(ruleDocComment, position274)
			}
			return true
		l273:
			position, tokenIndex = position273, tokenIndex273
			return false
		},
		/* 56 Identifier <- <(<(([a-z] / [A-Z] / '_') ([a-z] / [A-Z] / [0-9] / '_')*)> _ Action13)> */
		func() bool {
			position281, tokenIndex281 := position, tokenIndex
			{
				position282 := position
				{
					position283 := position
					{
						position284, tokenIndex284 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l285
						}
						position++
						goto l284
					l285:
						position, tokenIndex = position284, tokenIndex284
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l286
						}
						position++
						goto l284
					l286:
						position, tokenIndex = position284, tokenIndex284
						if buffer[position] != rune('_') {
							goto l281
						}
						position++
					}
				l284:
				l287:
					{
						position288, tokenIndex288 := position, tokenIndex
						{
							position289, tokenIndex289 := position, tokenIndex
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l290
							}
							position++
							goto l289
						l290:
							position, tokenIndex = position289, tokenIndex289
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l291
							}
							position++
							goto l289
						l291:
							position, tokenIndex = position289, tokenIndex289
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l292
							}
							position++
							goto l289
						l292:
							position, tokenIndex = position289, tokenIndex289
							if buffer[position] != rune('_') {
								goto l288
							}
							position++
						}
					l289:
						goto l287
					l288:
						position, tokenIndex = position288, tokenIndex288
					}
					add(rulePegText, position283)
				}
				if !_rules[rule_]() {
					goto l281
				}
				if !_rules[ruleAction13]() {
					goto l281
				}
				add(ruleIdentifier, position282)
			}
			return true
		l281:
			position, tokenIndex = position281, tokenIndex281
			return false
		},
		/* 57 String <- <(<('"' (!'"' .)* '"')> _ Action14)> */
		func() bool {
			position293, tokenIndex293 := position, tokenIndex
			{
				position294 := position
				{
					position295 := position
					if buffer[position] != rune('"') {
						goto l293
					}
					position++
				l296:
					{
						position297, tokenIndex297 := position, tokenIndex
						{
							position298, tokenIndex298 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l298
							}
							position++
							goto l297
						l298:
							position, tokenIndex = position298, tokenIndex298
						}
						if !matchDot() {
							goto l297
						}
						goto l296
					l297:
						position, tokenIndex = position297, tokenIndex297
					}
					if buffer[position] != rune('"') {
						goto l293
					}
					position++
					add(rulePegText, position295)
				}
				if !_rules[rule_]() {
					goto l293
				}
				if !_rules[ruleAction14]() {
					goto l293
				}
				add(ruleString, position294)
			}
			return true
		l293:
			position, tokenIndex = position293, tokenIndex293
			return false
		},
		/* 58 Number <- <(<('-'? [0-9]+ ('.' [0-9]+)?)> _ Action15)> */
		func() bool {
			position299, tokenIndex299 := position, tokenIndex
			{
				position300 := position
				{
					position301 := position
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l302
						}
						position++
						goto l303
					l302:
						position, tokenIndex = position302, tokenIndex302
					}
				l303:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l299
					}
					position++
				l304:
					{
						position305, tokenIndex305 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position305, tokenIndex305
					}
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l306
						}
						position++
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l306
						}
						position++
					l308:
						{
							position309, tokenIndex309 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l309
							}
							position++
							goto l308
						l309:
							position, tokenIndex = position309, tokenIndex309
						}
						goto l307
					l306:
						position, tokenIndex = position306, tokenIndex306
					}
				l307:
					add(rulePegText, position301)
				}
				if !_rules[rule_]() {
					goto l299
				}
				if !_rules[ruleAction15]() {
					goto l299
				}
				add(ruleNumber, position300)
			}
			return true
		l299:
			position, tokenIndex = position299, tokenIndex299
			return false
		},
		/* 59 Boolean <- <(<(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> _ Action16)> */
		func() bool {
			position310, tokenIndex310 := position, tokenIndex
			{
				position311 := position
				{
					position312 := position
					{
						position313, tokenIndex313 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l314
						}
						position++
						if buffer[position] != rune('r') {
							goto l314
						}
						position++
						if buffer[position] != rune('u') {
							goto l314
						}
						position++
						if buffer[position] != rune('e') {
							goto l314
						}
						position++
						goto l313
					l314:
						position, tokenIndex = position313, tokenIndex313
						if buffer[position] != rune('f') {
							goto l310
						}
						position++
						if buffer[position] != rune('a') {
							goto l310
						}
						position++
						if buffer[position] != rune('l') {
							goto l310
						}
						position++
						if buffer[position] != rune('s') {
							goto l310
						}
						position++
						if buffer[position] != rune('e') {
							goto l310
						}
						position++
					}
				l313:
					add(rulePegText, position312)
				}
				if !_rules[rule_]() {
					goto l310
				}
				if !_rules[ruleAction16]() {
					goto l310
				}
				add(ruleBoolean, position311)
			}
			return true
		l310:
			position, tokenIndex = position310, tokenIndex310
			return false
		},
		/* 60 LBRACE <- <('{' _)> */
		func() bool {
			position315, tokenIndex315 := position, tokenIndex
			{
				position316 := position
				if buffer[position] != rune('{') {
					goto l315
				}
				position++
				if !_rules[rule_]() {
					goto l315
				}
				add(ruleLBRACE, position316)
			}
			return true
		l315:
			position, tokenIndex = position315, tokenIndex315
			return false
		},
		/* 61 RBRACE <- <('}' _)> */
		func() bool {
			position317, tokenIndex317 := position, tokenIndex
			{
				position318 := position
				if buffer[position] != rune('}') {
					goto l317
				}
				position++
				if !_rules[rule_]() {
					goto l317
				}
				add(ruleRBRACE, position318)
			}
			return true
		l317:
			position, tokenIndex = position317, tokenIndex317
			return false
		},
		/* 62 LBRACKET <- <('[' _)> */
		func() bool {
			position319, tokenIndex319 := position, tokenIndex
			{
				position320 := position
				if buffer[position] != rune('[') {
					goto l319
				}
				position++
				if !_rules[rule_]() {
					goto l319
				}
				add(ruleLBRACKET, position320)
			}
			return true
		l319:
			position, tokenIndex = position319, tokenIndex319
			return false
		},
		/* 63 RBRACKET <- <(']' _)> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				if buffer[position] != rune(']') {
					goto l321
				}
				position++
				if !_rules[rule_]() {
					goto l321
				}
				add(ruleRBRACKET, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 64 LPAREN <- <('(' _)> */
		func() bool {
			position323, tokenIndex323 := position, tokenIndex
			{
				position324 := position
				if buffer[position] != rune('(') {
					goto l323
				}
				position++
				if !_rules[rule_]() {
					goto l323
				}
				add(ruleLPAREN, position324)
			}
			return true
		l323:
			position, tokenIndex = position323, tokenIndex323
			return false
		},
		/* 65 RPAREN <- <(')' _)> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				if buffer[position] != rune(')') {
					goto l325
				}
				position++
				if !_rules[rule_]() {
					goto l325
				}
				add(ruleRPAREN, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 66 COMMA <- <(',' _)> */
		func() bool {
			position327, tokenIndex327 := position, tokenIndex
			{
				position328 := position
				if buffer[position] != rune(',') {
					goto l327
				}
				position++
				if !_rules[rule_]() {
					goto l327
				}
				add(ruleCOMMA, position328)
			}
			return true
		l327:
			position, tokenIndex = position327, tokenIndex327
			return false
		},
		/* 67 COLON <- <(':' _)> */
		func() bool {
			position329, tokenIndex329 := position, tokenIndex
			{
				position330 := position
				if buffer[position] != rune(':') {
					goto l329
				}
				position++
				if !_rules[rule_]() {
					goto l329
				}
				add(ruleCOLON, position330)
			}
			return true
		l329:
			position, tokenIndex = position329, tokenIndex329
			return false
		},
		/* 68 SEMICOLON <- <(';' _)> */
		nil,
		/* 69 EQUALS <- <('=' _)> */
		func() bool {
			position332, tokenIndex332 := position, tokenIndex
			{
				position333 := position
				if buffer[position] != rune('=') {
					goto l332
				}
				position++
				if !_rules[rule_]() {
					goto l332
				}
				add(ruleEQUALS, position333)
			}
			return true
		l332:
			position, tokenIndex = position332, tokenIndex332
			return false
		},
		/* 70 PIPE <- <('|' _)> */
		func() bool {
			position334, tokenIndex334 := position, tokenIndex
			{
				position335 := position
				if buffer[position] != rune('|') {
					goto l334
				}
				position++
				if !_rules[rule_]() {
					goto l334
				}
				add(rulePIPE, position335)
			}
			return true
		l334:
			position, tokenIndex = position334, tokenIndex334
			return false
		},
		/* 71 DOT <- <('.' _)> */
		nil,
		/* 72 SPREAD <- <('.' '.' '.' _)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				if buffer[position] != rune('.') {
					goto l337
				}
				position++
				if buffer[position] != rune('.') {
					goto l337
				}
				position++
				if buffer[position] != rune('.') {
					goto l337
				}
				position++
				if !_rules[rule_]() {
					goto l337
				}
				add(ruleSPREAD, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 73 AT <- <('@' _)> */
		func() bool {
			position339, tokenIndex339 := position, tokenIndex
			{
				position340 := position
				if buffer[position] != rune('@') {
					goto l339
				}
				position++
				if !_rules[rule_]() {
					goto l339
				}
				add(ruleAT, position340)
			}
			return true
		l339:
			position, tokenIndex = position339, tokenIndex339
			return false
		},
		/* 74 LT <- <('<' _)> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				if buffer[position] != rune('<') {
					goto l341
				}
				position++
				if !_rules[rule_]() {
					goto l341
				}
				add(ruleLT, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 75 RT <- <('>' _)> */
		func() bool {
			position343, tokenIndex343 := position, tokenIndex
			{
				position344 := position
				if buffer[position] != rune('>') {
					goto l343
				}
				position++
				if !_rules[rule_]() {
					goto l343
				}
				add(ruleRT, position344)
			}
			return true
		l343:
			position, tokenIndex = position343, tokenIndex343
			return false
		},
		/* 76 DOTDOT <- <('.' '.' _)> */
		func() bool {
			position345, tokenIndex345 := position, tokenIndex
			{
				position346 := position
				if buffer[position] != rune('.') {
					goto l345
				}
				position++
				if buffer[position] != rune('.') {
					goto l345
				}
				position++
				if !_rules[rule_]() {
					goto l345
				}
				add(ruleDOTDOT, position346)
			}
			return true
		l345:
			position, tokenIndex = position345, tokenIndex345
			return false
		},
		/* 77 QUESTION <- <('?' _)> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				if buffer[position] != rune('?') {
					goto l347
				}
				position++
				if !_rules[rule_]() {
					goto l347
				}
				add(ruleQUESTION, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 78 DoubleColon <- <(':' ':' _)> */
		func() bool {
			position349, tokenIndex349 := position, tokenIndex
			{
				position350 := position
				if buffer[position] != rune(':') {
					goto l349
				}
				position++
				if buffer[position] != rune(':') {
					goto l349
				}
				position++
				if !_rules[rule_]() {
					goto l349
				}
				add(ruleDoubleColon, position350)
			}
			return true
		l349:
			position, tokenIndex = position349, tokenIndex349
			return false
		},
		/* 79 SingleColon <- <(':' _)> */
		nil,
		/* 80 _ <- <(' ' / '\t' / '\r' / '\n' / Comment / DocComment)*> */
		func() bool {
			{
				position353 := position
			l354:
				{
					position355, tokenIndex355 := position, tokenIndex
					{
						position356, tokenIndex356 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l357
						}
						position++
						goto l356
					l357:
						position, tokenIndex = position356, tokenIndex356
						if buffer[position] != rune('\t') {
							goto l358
						}
						position++
						goto l356
					l358:
						position, tokenIndex = position356, tokenIndex356
						if buffer[position] != rune('\r') {
							goto l359
						}
						position++
						goto l356
					l359:
						position, tokenIndex = position356, tokenIndex356
						if buffer[position] != rune('\n') {
							goto l360
						}
						position++
						goto l356
					l360:
						position, tokenIndex = position356, tokenIndex356
						if !_rules[ruleComment]() {
							goto l361
						}
						goto l356
					l361:
						position, tokenIndex = position356, tokenIndex356
						if !_rules[ruleDocComment]() {
							goto l355
						}
					}
				l356:
					goto l354
				l355:
					position, tokenIndex = position355, tokenIndex355
				}
				add(rule_, position353)
			}
			return true
		},
		/* 81 EOL <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position362, tokenIndex362 := position, tokenIndex
			{
				position363 := position
				{
					position364, tokenIndex364 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l365
					}
					position++
					if buffer[position] != rune('\n') {
						goto l365
					}
					position++
					goto l364
				l365:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('\n') {
						goto l366
					}
					position++
					goto l364
				l366:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('\r') {
						goto l362
					}
					position++
				}
			l364:
				add(ruleEOL, position363)
			}
			return true
		l362:
			position, tokenIndex = position362, tokenIndex362
			return false
		},
		/* 83 Action0 <- <{ p.Init() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 84 Action1 <- <{ p.PrintDebug() }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 85 Action2 <- <{ p.PopPathAndAddUseStatement() }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 86 Action3 <- <{ p.BuildPathFromSegments(true) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 87 Action4 <- <{ p.BuildPathFromSegments(false) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 88 Action5 <- <{ p.PushSuperKeyword() }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 89 Action6 <- <{ p.BeginStruct() }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 90 Action7 <- <{ p.EndStruct() }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 91 Action8 <- <{ p.PopStructAndAddStatement() }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 92 Action9 <- <{ p.BeginField() }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 93 Action10 <- <{ p.EndField() }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 94 Action11 <- <{ p.AddFieldColon() }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 95 Action12 <- <{ p.MarkFieldOptional() }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		nil,
		/* 97 Action13 <- <{ p.PushIdentifier(buffer[begin:end]) }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 98 Action14 <- <{ p.PushString(buffer[begin:end]) }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 99 Action15 <- <{ p.PushNumber(buffer[begin:end]) }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 100 Action16 <- <{ p.PushBoolean(buffer[begin:end]) }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
